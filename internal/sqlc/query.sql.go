// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
)

const addCompany = `-- name: AddCompany :exec
INSERT INTO companies (
    name, site
) VALUES (
    ?, ?
)
`

type AddCompanyParams struct {
	Name string
	Site string
}

func (q *Queries) AddCompany(ctx context.Context, arg AddCompanyParams) error {
	_, err := q.db.ExecContext(ctx, addCompany, arg.Name, arg.Site)
	return err
}

const getCompany = `-- name: GetCompany :many
SELECT name, site FROM companies
WHERE name = ?
ORDER BY site
`

func (q *Queries) GetCompany(ctx context.Context, name string) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompany, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(&i.Name, &i.Site); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompanies = `-- name: ListCompanies :many
SELECT name, site FROM companies
ORDER BY site
`

func (q *Queries) ListCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(&i.Name, &i.Site); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
